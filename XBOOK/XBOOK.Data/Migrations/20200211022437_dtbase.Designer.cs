// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XBOOK.Data.Entities;

namespace XBOOK.Data.Migrations
{
    [DbContext(typeof(XBookContext))]
    [Migration("20200211022437_dtbase")]
    partial class dtbase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CITS.Data.AppRole", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken();

                b.Property<string>("Description")
                    .HasMaxLength(250);

                b.Property<string>("Name")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("CITS.Data.AppUser", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("AccessFailedCount");

                b.Property<string>("Avatar");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken();

                b.Property<DateTime>("DateCreated");

                b.Property<DateTime>("DateModified");

                b.Property<string>("Email")
                    .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed");

                b.Property<string>("FullName");

                b.Property<bool>("LockoutEnabled");

                b.Property<DateTimeOffset?>("LockoutEnd");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256);

                b.Property<string>("PasswordHash");

                b.Property<string>("PhoneNumber");

                b.Property<bool>("PhoneNumberConfirmed");

                b.Property<string>("SecurityStamp");

                b.Property<bool>("Status");

                b.Property<bool>("TwoFactorEnabled");

                b.Property<string>("UserName")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("CITS.Data.AppendixProperty", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<long>("AppendixTypeVersionId");

                b.Property<string>("ControlType")
                    .IsRequired();

                b.Property<string>("Description");

                b.Property<bool>("IsRequired");

                b.Property<string>("Label");

                b.Property<string>("Name");

                b.Property<string>("Options");

                b.Property<string>("ValueType")
                    .IsRequired();

                b.HasKey("Id");

                b.HasIndex("AppendixTypeVersionId");

                b.ToTable("AppendixProperties");
            });

            modelBuilder.Entity("CITS.Data.AppendixPropertyValue", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<long>("AppendixTypeVersionId");

                b.Property<long>("ApplicantApplicationId");

                b.Property<long>("ApplicationDependantId");

                b.Property<string>("Value");

                b.HasKey("Id");

                b.HasIndex("AppendixTypeVersionId");

                b.HasIndex("ApplicantApplicationId");

                b.HasIndex("ApplicationDependantId");

                b.ToTable("AppendixPropertyValues");
            });

            modelBuilder.Entity("CITS.Data.AppendixType", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Description");

                b.Property<string>("Image");

                b.Property<string>("Name");

                b.HasKey("Id");

                b.ToTable("AppendixTypes");
            });

            modelBuilder.Entity("CITS.Data.AppendixTypeVersion", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<long>("AppendixTypeId");

                b.Property<string>("Description");

                b.Property<string>("Template");

                b.Property<string>("Version");

                b.HasKey("Id");

                b.HasIndex("AppendixTypeId");

                b.ToTable("AppendixTypeVersions");
            });

            modelBuilder.Entity("CITS.Data.ApplicantApplication", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ApplicantId");

                b.Property<long>("ApplicationVersionId");

                b.HasKey("Id");

                b.HasIndex("ApplicationVersionId");

                b.ToTable("ApplicantApplications");
            });

            modelBuilder.Entity("CITS.Data.Application.Application", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Description");

                b.Property<string>("Name");

                b.HasKey("Id");

                b.ToTable("Applications");
            });

            modelBuilder.Entity("CITS.Data.Application.ApplicationDependant", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<long>("ApplicationVersionId");

                b.Property<string>("Name");

                b.Property<string>("Type")
                    .IsRequired();

                b.HasKey("Id");

                b.HasIndex("ApplicationVersionId");

                b.ToTable("ApplicationDependants");
            });

            modelBuilder.Entity("CITS.Data.Application.ApplicationDependantAppendix", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<long>("AppendixTypeVersionId");

                b.Property<long>("ApplicationDependantId");

                b.HasKey("Id");

                b.HasIndex("AppendixTypeVersionId");

                b.HasIndex("ApplicationDependantId");

                b.ToTable("ApplicationDependantAppendices");
            });

            modelBuilder.Entity("CITS.Data.Application.ApplicationVersion", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<long>("ApplicationId");

                b.Property<string>("Version");

                b.HasKey("Id");

                b.HasIndex("ApplicationId");

                b.ToTable("ApplicationVersions");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType");

                b.Property<string>("ClaimValue");

                b.Property<int>("RoleId");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType");

                b.Property<string>("ClaimValue");

                b.Property<int>("UserId");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.Property<string>("LoginProvider");

                b.Property<string>("ProviderKey");

                b.Property<string>("ProviderDisplayName");

                b.Property<int>("UserId");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasAlternateKey("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
            {
                b.Property<int>("UserId");

                b.Property<int>("RoleId");

                b.HasKey("UserId", "RoleId");

                b.HasAlternateKey("RoleId", "UserId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.Property<int>("UserId");

                b.Property<string>("LoginProvider");

                b.Property<string>("Name");

                b.Property<string>("Value");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.HasAlternateKey("UserId");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("CITS.Data.AppendixProperty", b =>
            {
                b.HasOne("CITS.Data.AppendixTypeVersion", "AppendixTypeVersion")
                    .WithMany("Properties")
                    .HasForeignKey("AppendixTypeVersionId")
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity("CITS.Data.AppendixPropertyValue", b =>
            {
                b.HasOne("CITS.Data.AppendixTypeVersion", "AppendixTypeVersion")
                    .WithMany()
                    .HasForeignKey("AppendixTypeVersionId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.HasOne("CITS.Data.ApplicantApplication", "ApplicantApplication")
                    .WithMany()
                    .HasForeignKey("ApplicantApplicationId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.HasOne("CITS.Data.Application.ApplicationDependant", "ApplicationDependant")
                    .WithMany()
                    .HasForeignKey("ApplicationDependantId")
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity("CITS.Data.AppendixTypeVersion", b =>
            {
                b.HasOne("CITS.Data.AppendixType", "AppendixType")
                    .WithMany("Versions")
                    .HasForeignKey("AppendixTypeId")
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity("CITS.Data.ApplicantApplication", b =>
            {
                b.HasOne("CITS.Data.Application.ApplicationVersion", "ApplicationVersion")
                    .WithMany()
                    .HasForeignKey("ApplicationVersionId")
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity("CITS.Data.Application.ApplicationDependant", b =>
            {
                b.HasOne("CITS.Data.Application.ApplicationVersion", "ApplicationVersion")
                    .WithMany("ApplicationDepenants")
                    .HasForeignKey("ApplicationVersionId")
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity("CITS.Data.Application.ApplicationDependantAppendix", b =>
            {
                b.HasOne("CITS.Data.AppendixTypeVersion", "AppendixTypeVersion")
                    .WithMany()
                    .HasForeignKey("AppendixTypeVersionId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.HasOne("CITS.Data.Application.ApplicationDependant", "ApplicationDependant")
                    .WithMany("Appendixes")
                    .HasForeignKey("ApplicationDependantId")
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity("CITS.Data.Application.ApplicationVersion", b =>
            {
                b.HasOne("CITS.Data.Application.Application", "Application")
                    .WithMany("ApplicationVersions")
                    .HasForeignKey("ApplicationId")
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
            {
                b.HasOne("CITS.Data.AppRole")
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
            {
                b.HasOne("CITS.Data.AppUser")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.HasOne("CITS.Data.AppUser")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
            {
                b.HasOne("CITS.Data.AppRole")
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("CITS.Data.AppUser")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.HasOne("CITS.Data.AppUser")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade);
            });
#pragma warning restore 612, 618
        }
    }
}