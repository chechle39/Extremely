// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XBOOK.Data.Entities;

namespace XBOOK.Data.Migrations
{
    [DbContext(typeof(XBookContext))]
    [Migration("20200211022437_dtbase")]
    partial class dtbase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasAlternateKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasAlternateKey("RoleId", "UserId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasAlternateKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.AccountChart", b =>
                {
                    b.Property<string>("accountNumber")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("accountName");

                    b.Property<string>("accountType");

                    b.Property<decimal?>("closingBalance");

                    b.Property<bool>("isParent");

                    b.Property<decimal?>("openingBalance");

                    b.Property<string>("parentAccount");

                    b.HasKey("accountNumber");

                    b.ToTable("AccountChart");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.BuyInvDetail", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("amount");

                    b.Property<string>("description");

                    b.Property<long>("invoiceID");

                    b.Property<decimal?>("price");

                    b.Property<int>("productID");

                    b.Property<string>("productName");

                    b.Property<decimal?>("qty");

                    b.Property<decimal?>("vat");

                    b.HasKey("ID");

                    b.HasIndex("invoiceID");

                    b.HasIndex("productID");

                    b.ToTable("BuyInvDetail");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.BuyInvoice", b =>
                {
                    b.Property<long>("invoiceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("amountPaid");

                    b.Property<decimal?>("discRate");

                    b.Property<decimal?>("discount");

                    b.Property<DateTime?>("dueDate");

                    b.Property<string>("invoiceNumber");

                    b.Property<string>("invoiceSerial");

                    b.Property<DateTime?>("issueDate");

                    b.Property<string>("note");

                    b.Property<string>("reference");

                    b.Property<string>("status");

                    b.Property<decimal?>("subTotal");

                    b.Property<int?>("supplierID");

                    b.Property<string>("term");

                    b.Property<decimal?>("vatTax");

                    b.HasKey("invoiceID");

                    b.HasIndex("supplierID");

                    b.ToTable("BuyInvoice");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID");

                    b.Property<string>("CategoryName");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.Client", b =>
                {
                    b.Property<int>("clientID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tag");

                    b.Property<string>("address");

                    b.Property<string>("bankAccount");

                    b.Property<string>("clientName");

                    b.Property<string>("contactName");

                    b.Property<string>("email");

                    b.Property<string>("note");

                    b.Property<string>("taxCode");

                    b.HasKey("clientID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.CompanyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address");

                    b.Property<string>("bankAccount");

                    b.Property<string>("bizPhone");

                    b.Property<string>("city");

                    b.Property<string>("code");

                    b.Property<string>("companyName");

                    b.Property<string>("country");

                    b.Property<string>("currency");

                    b.Property<string>("dateFormat");

                    b.Property<string>("directorName");

                    b.Property<string>("logoFilePath");

                    b.Property<string>("mobilePhone");

                    b.Property<string>("taxCode");

                    b.Property<string>("zipCode");

                    b.HasKey("Id");

                    b.ToTable("CompanyProfile");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.EntryPattern", b =>
                {
                    b.Property<int>("patternID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("accNumber");

                    b.Property<string>("crspAccNumber");

                    b.Property<string>("entryType");

                    b.Property<string>("note");

                    b.Property<string>("transactionType");

                    b.HasKey("patternID");

                    b.ToTable("EntryPattern");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.GeneralLedger", b =>
                {
                    b.Property<long>("ledgerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("accNumber");

                    b.Property<string>("clientID");

                    b.Property<string>("clientName");

                    b.Property<decimal>("credit");

                    b.Property<string>("crspAccNumber");

                    b.Property<DateTime>("dateIssue");

                    b.Property<decimal>("debit");

                    b.Property<string>("note");

                    b.Property<string>("reference");

                    b.Property<string>("transactionNo");

                    b.Property<string>("transactionType");

                    b.HasKey("ledgerID");

                    b.ToTable("GeneralLedger");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.JournalDetail", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("JournalID");

                    b.Property<string>("accNumber");

                    b.Property<decimal>("credit");

                    b.Property<string>("crspAccNumber");

                    b.Property<decimal>("debit");

                    b.Property<string>("note");

                    b.HasKey("ID");

                    b.ToTable("JournalDetail");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.JournalEntry", b =>
                {
                    b.Property<long>("JournalID");

                    b.Property<string>("accountNumber");

                    b.Property<decimal>("creditAmount");

                    b.Property<decimal>("debitAmount");

                    b.HasKey("JournalID");

                    b.ToTable("JournalEntry");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.MoneyReceipt", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("amount");

                    b.Property<string>("bankAccount");

                    b.Property<long?>("clientID");

                    b.Property<string>("clientName");

                    b.Property<string>("entryType");

                    b.Property<string>("note");

                    b.Property<DateTime>("payDate");

                    b.Property<string>("payType");

                    b.Property<int>("payTypeID");

                    b.Property<string>("receiptNumber");

                    b.Property<string>("receiverName");

                    b.HasKey("ID");

                    b.ToTable("MoneyReceipt");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.PaymentReceipt", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("amount");

                    b.Property<string>("bankAccount");

                    b.Property<string>("entryType");

                    b.Property<string>("note");

                    b.Property<DateTime>("payDate");

                    b.Property<string>("payType");

                    b.Property<int>("payTypeID");

                    b.Property<string>("receiptNumber");

                    b.Property<string>("receiverName");

                    b.Property<long?>("supplierID");

                    b.Property<string>("supplierName");

                    b.HasKey("ID");

                    b.ToTable("PaymentReceipt");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.Payments", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("amount");

                    b.Property<long>("invoiceID");

                    b.Property<string>("note");

                    b.Property<DateTime>("payDate");

                    b.Property<string>("payType");

                    b.Property<int>("payTypeID");

                    b.Property<string>("receiptNumber");

                    b.HasKey("ID");

                    b.HasIndex("invoiceID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.Payments_2", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("amount");

                    b.Property<long>("invoiceID");

                    b.Property<string>("note");

                    b.Property<DateTime>("payDate");

                    b.Property<string>("payType");

                    b.Property<int>("payTypeID");

                    b.Property<string>("receiptNumber");

                    b.HasKey("ID");

                    b.HasIndex("invoiceID");

                    b.ToTable("Payments_2");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.Product", b =>
                {
                    b.Property<int>("productID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Unit");

                    b.Property<int?>("categoryID");

                    b.Property<string>("description");

                    b.Property<string>("productName");

                    b.Property<decimal?>("unitPrice");

                    b.HasKey("productID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.SaleInvDetail", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("amount");

                    b.Property<string>("description");

                    b.Property<long>("invoiceID");

                    b.Property<decimal?>("price");

                    b.Property<int>("productID");

                    b.Property<string>("productName");

                    b.Property<decimal?>("qty");

                    b.Property<decimal?>("vat");

                    b.HasKey("ID");

                    b.HasIndex("invoiceID");

                    b.HasIndex("productID");

                    b.ToTable("SaleInvDetail");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.SaleInvoice", b =>
                {
                    b.Property<long>("invoiceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("amountPaid");

                    b.Property<int?>("clientID");

                    b.Property<decimal?>("discRate");

                    b.Property<decimal?>("discount");

                    b.Property<DateTime?>("dueDate");

                    b.Property<string>("invoiceNumber");

                    b.Property<string>("invoiceSerial");

                    b.Property<DateTime?>("issueDate");

                    b.Property<string>("note");

                    b.Property<string>("reference");

                    b.Property<string>("status");

                    b.Property<decimal?>("subTotal");

                    b.Property<string>("term");

                    b.Property<decimal?>("vatTax");

                    b.HasKey("invoiceID");

                    b.HasIndex("clientID");

                    b.ToTable("SaleInvoice");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.Supplier", b =>
                {
                    b.Property<int>("supplierID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tag");

                    b.Property<string>("address");

                    b.Property<string>("bankAccount");

                    b.Property<string>("contactName");

                    b.Property<string>("email");

                    b.Property<string>("note");

                    b.Property<string>("supplierName");

                    b.Property<string>("taxCode");

                    b.HasKey("supplierID");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.Tax", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("taxName");

                    b.Property<decimal?>("taxRate");

                    b.HasKey("ID");

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("XBOOK.Data.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("XBOOK.Data.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Avatar");

                    b.Property<decimal>("Balance");

                    b.Property<DateTime?>("BirthDay");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("XBOOK.Data.Identity.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("XBOOK.Data.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("XBOOK.Data.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("XBOOK.Data.Identity.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XBOOK.Data.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("XBOOK.Data.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XBOOK.Data.Entities.BuyInvDetail", b =>
                {
                    b.HasOne("XBOOK.Data.Entities.BuyInvoice", "BuyInvoice")
                        .WithMany("BuyInvDetails")
                        .HasForeignKey("invoiceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XBOOK.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XBOOK.Data.Entities.BuyInvoice", b =>
                {
                    b.HasOne("XBOOK.Data.Entities.Supplier", "Supplier")
                        .WithMany("BuyInvoices")
                        .HasForeignKey("supplierID");
                });

            modelBuilder.Entity("XBOOK.Data.Entities.Payments", b =>
                {
                    b.HasOne("XBOOK.Data.Entities.SaleInvoice", "SaleInvoice")
                        .WithMany("Payments")
                        .HasForeignKey("invoiceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XBOOK.Data.Entities.Payments_2", b =>
                {
                    b.HasOne("XBOOK.Data.Entities.BuyInvoice", "BuyInvoice")
                        .WithMany("Payments_2")
                        .HasForeignKey("invoiceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XBOOK.Data.Entities.SaleInvDetail", b =>
                {
                    b.HasOne("XBOOK.Data.Entities.SaleInvoice", "SaleInvoice")
                        .WithMany("SaleInvDetails")
                        .HasForeignKey("invoiceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XBOOK.Data.Entities.Product", "Product")
                        .WithMany("SaleInvDetails")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XBOOK.Data.Entities.SaleInvoice", b =>
                {
                    b.HasOne("XBOOK.Data.Entities.Client", "Client")
                        .WithMany("SaleInvoices")
                        .HasForeignKey("clientID");
                });
#pragma warning restore 612, 618
        }
    }
}
